# Next Infrastructure - Service Provision
지금은immutable 또는 devops와 같이 서비스가 우선시 되는 인프라 환경을 시장에서 요구하고 있다. 또한 서비스 우선의 운영환경을 구축하는 기본 요소로 클라우드 환경과 어플리케이션단에서의스케일 아웃 구조 제공 그리고 CI/CD 개발환경을 필요로 한다.
그렇다면 클라우드 환경이 아닌 인프라구조에서는 서비스의 연속성을 가져가는 것이 불가능한가? 그렇치 않다. 표준화와 자동화의 구현을 통해서 서비스 연속성을 가지는 immutable infrastructure를 구현할 수 있다. 하지만 일반 베어메탈 환경에서는 서비스 노드 확장 및 대응시간이 늦어지는 것은 사실이다. 그럼 OS 구축과 어플리케이션과 설정 파일 배포에 대해 먼저 알아보도록 하겠다.
immutable infrastructure에서 빠르게 서비스 환경을 구축할 수 있는 것은 OS와 어플리케이션이 합쳐진 가상화 템플릿을 사용하기 때문이다. container 역시 마찬가지로 OS환경과 어플리케이션 환경이 함께 이미지로 배포될 수 있기 때문에 auto-scale과 같은 서비스 연속성 기능이 가능하다. 하지만 배포(provision)의 방법으로 꼭 VM 이미지만 사용할 필요는 없다. ansible과 같은 자동화 도구를 사용해서 코드로만 구현해 놓고 필요에 순간에 배포하도록 하면 된다. 즉 immutable service 구축 방법은 아래 두 가지가 된다.

- OS와 어플리케이션의 이미지 사용: VM Template 또는 Container 이미지
- Ansible, Chef 와 같은 자동화 도구를 이용한 코드화

그럼 위 두가지 방법의 장단점에 대해 좀 더 자세히 알아보도록 하겠다.

## OS와 어플리케이션의 이미지 사용: VM Template 또는 Container 이미지
이미지를 통한 배포는 VMware, RHV와 같은 가상화 솔루션의 VM 템플릿 그리고 오픈스택의 Glance, AWS의 AMI 형태로 이미 사용자에게 익숙하게 사용되고 있으며, 이를 기반으로 서비스 자동확장하는데 사용되고 있다. 오픈스택의 heat 또는 AWS의 cloudformation이 이에 대한 대표적인 서비스가 될 수 있다. 이미 OS와 어플리케이션 설정을 표준화하여 이미지로 만들어졌기 때문에 배포도 찍어내기만 하는 것이라 배포의 속도가 빠르다. 하지만 세상에 영원한 것은 존재하지 않는 것처럼 OS 설정 및 어플리케이션 환경은 계속 변화하게 되고 이를 반영할 때마다 새로운 이미지를 만들어야하는 부담을 가지게 된다. 
## Ansible, Chef 와 같은 자동화 도구를 이용한 코드화
